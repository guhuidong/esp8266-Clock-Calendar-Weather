#include <Arduino.h>
#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <ArduinoJson.h>
#define LCD_BK  5
U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/ 14 /* A4 */ , /* data=*/ 13 /* A2 */, /* CS=*/ 15 /* A3 */, /* reset=*/ U8X8_PIN_NONE);
unsigned char lcd_disp_table[4][16];
char week_str[8][2]={{0xd6,0xdc},{0xd2,0xbb},{0xb6,0xfe},{0xc8,0xfd},{0xcb,0xc4},{0xce,0xe5},{0xc1,0xf9},{0xc8,0xd5}};
char mon_str[12][2]={{0xd5,0xfd},{0xb6,0xfe},{0xc8,0xfd},{0xcb,0xc4},{0xce,0xe5},{0xc1,0xf9},{0xc6,0xdf},{0xb0,0xcb},{0xbe,0xc5},{0xca,0xae},{0xb6,0xac},{0xc0,0xaf}};
char day_str[14][2]={{0xb3,0xf5},{0xca,0xae},{0xd8,0xa5},{0xd8,0xa6},{0xca,0xae},{0xd2,0xbb},{0xb6,0xfe},{0xc8,0xfd},{0xcb,0xc4},{0xce,0xe5},{0xc1,0xf9},{0xc6,0xdf},{0xb0,0xcb},{0xbe,0xc5}};
char tg_str[10][2]={{0xb8,0xfd},{0xd0,0xc1},{0xc8,0xc9},{0xb9,0xef},{0xbc,0xd7},{0xd2,0xd2},{0xb1,0xfb},{0xb6,0xa1},{0xce,0xec},{0xd2,0xd1}};
char dz_str[12][2]={{0xc9,0xea},{0xd3,0xcf},{0xd0,0xe7},{0xba,0xa5},{0xd7,0xd3},{0xb3,0xf3},{0xd2,0xfa},{0xc3,0xae},{0xb3,0xbd},{0xcb,0xc8},{0xce,0xe7},{0xce,0xb4}};

const char *ssid     = "TP-LINK_gu_link";
const char *password = "telecom2002";
WiFiUDP ntpUDP;
WiFiClient client1;
NTPClient timeClient(ntpUDP, "cn.ntp.org.cn", 3600, 60000);
uint32_t second;
static int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

boolean isLeapYear(unsigned int year) {
  return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
}
unsigned char num2448[12][144]={
{0x00,0x00,0x00,0x00,0x3E,0x00,0x80,0xFF,0x00,0xC0,0xFF,0x01,0xE0,0xFF,0x03,0xF0,
0xFF,0x07,0xF0,0xFF,0x07,0xF8,0xFF,0x0F,0xF8,0xE3,0x0F,0xF8,0xC1,0x0F,0xFC,0x80,
0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0x7C,0x00,0x1F,0x7E,0x00,0x3F,
0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,
0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,
0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,
0x7E,0x00,0x3F,0x7C,0x00,0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0xFC,
0x80,0x1F,0xF8,0xC1,0x0F,0xF8,0xE3,0x0F,0xF8,0xFF,0x0F,0xF0,0xFF,0x07,0xF0,0xFF,
0x07,0xE0,0xFF,0x03,0xC0,0xFF,0x01,0x80,0xFF,0x00,0x00,0x3E,0x00,0x00,0x00,0x00},/*"0",0*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x01,0x00,0xF0,0x01,0x00,0xF8,0x01,0x00,
0xF8,0x01,0x00,0xFC,0x01,0x00,0xFC,0x01,0x00,0xFE,0x01,0x00,0xFF,0x01,0x80,0xFF,
0x01,0xC0,0xFF,0x01,0xF0,0xFF,0x01,0xF8,0xFF,0x01,0xF8,0xFF,0x01,0xF8,0xFB,0x01,
0xF8,0xF9,0x01,0xF8,0xF8,0x01,0x78,0xF8,0x01,0x38,0xF8,0x01,0x08,0xF8,0x01,0x00,
0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,
0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,
0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,
0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,
0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,0x00,0x00,0x00,0x00,0x00},/*"1",1*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0xC0,0xFF,0x01,0xE0,0xFF,0x03,0xF0,
0xFF,0x07,0xF8,0xFF,0x0F,0xF8,0xFF,0x1F,0xFC,0xFF,0x1F,0xFC,0xC3,0x1F,0xFC,0x80,
0x3F,0xFE,0x80,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x78,0x00,0x3F,
0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x80,0x3F,0x00,0x80,0x1F,0x00,0xC0,0x1F,0x00,
0xC0,0x1F,0x00,0xE0,0x0F,0x00,0xF0,0x0F,0x00,0xF8,0x07,0x00,0xF8,0x07,0x00,0xFC,
0x03,0x00,0xFE,0x01,0x00,0xFF,0x00,0x80,0xFF,0x00,0x80,0x7F,0x00,0xC0,0x3F,0x00,
0xE0,0x1F,0x00,0xE0,0x0F,0x00,0xF0,0x0F,0x00,0xF8,0x07,0x00,0xF8,0x03,0x00,0xFC,
0x03,0x00,0xFC,0xFF,0x3F,0xFE,0xFF,0x3F,0xFE,0xFF,0x3F,0xFE,0xFF,0x3F,0xFE,0xFF,
0x3F,0xFF,0xFF,0x3F,0xFF,0xFF,0x3F,0xFF,0xFF,0x3F,0x00,0x00,0x00,0x00,0x00,0x00},/*"2",2*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0xC0,0xFF,0x00,0xE0,0xFF,0x01,0xF0,
0xFF,0x03,0xF8,0xFF,0x07,0xF8,0xFF,0x0F,0xFC,0xFF,0x0F,0xFC,0xE3,0x0F,0xFC,0xC0,
0x1F,0xFE,0x80,0x1F,0x7E,0x80,0x1F,0x7E,0x80,0x1F,0x60,0x80,0x1F,0x00,0x80,0x1F,
0x00,0xC0,0x1F,0x00,0xC0,0x0F,0x00,0xF0,0x0F,0x00,0xFC,0x07,0x00,0xFC,0x03,0x00,
0xFE,0x01,0x00,0xFE,0x01,0x00,0xFE,0x07,0x00,0xFE,0x0F,0x00,0xE6,0x0F,0x00,0xC0,
0x1F,0x00,0x80,0x1F,0x00,0x80,0x3F,0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x00,0x3F,
0x00,0x00,0x3F,0x70,0x00,0x3F,0x7E,0x00,0x3F,0xFE,0x00,0x3F,0xFE,0x80,0x3F,0xFC,
0xC1,0x1F,0xFC,0xE3,0x1F,0xFC,0xFF,0x0F,0xF8,0xFF,0x0F,0xF8,0xFF,0x07,0xF0,0xFF,
0x07,0xE0,0xFF,0x03,0xC0,0xFF,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"3",3*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,
0xE0,0x0F,0x00,0xF0,0x0F,0x00,0xF0,0x0F,0x00,0xF8,0x0F,0x00,0xF8,0x0F,0x00,0xFC,
0x0F,0x00,0xFC,0x0F,0x00,0xFE,0x0F,0x00,0xFE,0x0F,0x00,0xFF,0x0F,0x00,0xFF,0x0F,
0x80,0xDF,0x0F,0x80,0xDF,0x0F,0xC0,0xCF,0x0F,0xC0,0xCF,0x0F,0xE0,0xC7,0x0F,0xE0,
0xC7,0x0F,0xF0,0xC3,0x0F,0xF8,0xC1,0x0F,0xF8,0xC1,0x0F,0xFC,0xC0,0x0F,0xFC,0xC0,
0x0F,0x7E,0xC0,0x0F,0x7E,0xC0,0x0F,0x3F,0xC0,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,
0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,
0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00},/*"4",4*/

{0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0xFF,0x3F,0xE0,0xFF,0x3F,0xE0,0xFF,0x3F,0xE0,
0xFF,0x3F,0xE0,0xFF,0x3F,0xF0,0xFF,0x3F,0xF0,0xFF,0x3F,0xF0,0xFF,0x3F,0xF0,0x03,
0x00,0xF0,0x03,0x00,0xF0,0x03,0x00,0xF0,0x03,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,
0xF8,0xF9,0x00,0xF8,0xFF,0x03,0xF8,0xFF,0x07,0xF8,0xFF,0x0F,0xF8,0xFF,0x0F,0xFC,
0xFF,0x1F,0xFC,0xFF,0x3F,0xFC,0xC3,0x3F,0xFC,0x80,0x3F,0xE0,0x00,0x3F,0x00,0x00,
0x7F,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,
0x00,0x00,0x7E,0x70,0x00,0x7E,0x7E,0x00,0x7E,0xFE,0x00,0x3F,0xFE,0x00,0x3F,0xFC,
0x81,0x3F,0xFC,0xC3,0x1F,0xFC,0xFF,0x1F,0xF8,0xFF,0x0F,0xF8,0xFF,0x0F,0xF0,0xFF,
0x07,0xE0,0xFF,0x03,0xC0,0xFF,0x01,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"5",5*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC,0x00,0x00,0xFF,0x03,0x80,0xFF,0x07,0xC0,
0xFF,0x07,0xE0,0xFF,0x0F,0xF0,0xFF,0x1F,0xF0,0xFF,0x1F,0xF8,0xC3,0x1F,0xF8,0x81,
0x3F,0xFC,0x81,0x3F,0xFC,0x00,0x3F,0xFC,0x00,0x07,0xFC,0x00,0x00,0xFC,0x00,0x00,
0x7E,0x00,0x00,0x7E,0xF8,0x00,0x7E,0xFE,0x03,0x7E,0xFF,0x07,0xFE,0xFF,0x0F,0xFE,
0xFF,0x0F,0xFE,0xFF,0x1F,0xFE,0xC3,0x3F,0xFE,0x81,0x3F,0xFE,0x01,0x3F,0xFE,0x00,
0x7F,0xFE,0x00,0x7E,0xFE,0x00,0x7E,0xFE,0x00,0x7E,0xFE,0x00,0x7E,0xFE,0x00,0x7E,
0xFC,0x00,0x7E,0xFC,0x00,0x7E,0xFC,0x00,0x7E,0xFC,0x00,0x7E,0xFC,0x01,0x3F,0xF8,
0x03,0x3F,0xF8,0xC7,0x3F,0xF8,0xFF,0x1F,0xF0,0xFF,0x1F,0xE0,0xFF,0x0F,0xE0,0xFF,
0x0F,0xC0,0xFF,0x07,0x00,0xFF,0x01,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"6",6*/

{0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFF,0x7F,0xFE,0xFF,0x7F,0xFE,0xFF,0x7F,0xFE,
0xFF,0x7F,0xFE,0xFF,0x7F,0xFE,0xFF,0x7F,0xFE,0xFF,0x7F,0xFE,0xFF,0x3F,0x00,0x00,
0x3F,0x00,0x80,0x1F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xE0,0x07,0x00,0xE0,0x07,
0x00,0xE0,0x03,0x00,0xF0,0x03,0x00,0xF0,0x03,0x00,0xF8,0x01,0x00,0xF8,0x01,0x00,
0xF8,0x00,0x00,0xFC,0x00,0x00,0xFC,0x00,0x00,0x7C,0x00,0x00,0x7E,0x00,0x00,0x7E,
0x00,0x00,0x7E,0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,0x00,0x3F,0x00,
0x00,0x1F,0x00,0x80,0x1F,0x00,0x80,0x1F,0x00,0x80,0x1F,0x00,0x80,0x1F,0x00,0x80,
0x1F,0x00,0x80,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,
0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0xC0,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"7",7*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0xC0,0xFF,0x01,0xE0,0xFF,0x03,0xF0,
0xFF,0x07,0xF0,0xFF,0x07,0xF8,0xFF,0x0F,0xF8,0xFF,0x0F,0xFC,0xE3,0x1F,0xFC,0xC1,
0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,
0xFC,0x80,0x1F,0xF8,0xC1,0x0F,0xF8,0xE3,0x0F,0xF0,0xFF,0x07,0xF0,0xFF,0x07,0xE0,
0xFF,0x03,0xC0,0xFF,0x01,0xE0,0xFF,0x03,0xF0,0xFF,0x07,0xF8,0xFF,0x0F,0xFC,0xE1,
0x1F,0xFC,0x80,0x1F,0xFC,0x80,0x1F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,
0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0x7E,0x00,0x3F,0xFE,0x80,0x3F,0xFC,
0x81,0x1F,0xFC,0xE3,0x1F,0xFC,0xFF,0x1F,0xF8,0xFF,0x0F,0xF8,0xFF,0x0F,0xF0,0xFF,
0x07,0xE0,0xFF,0x03,0xC0,0xFF,0x01,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"8",8*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x00,0xC0,0x7F,0x00,0xF0,0xFF,0x01,0xF8,
0xFF,0x03,0xF8,0xFF,0x03,0xFC,0xFF,0x07,0xFC,0xFF,0x0F,0xFE,0xF1,0x0F,0xFE,0xE0,
0x0F,0x7E,0xC0,0x1F,0x7F,0x80,0x1F,0x3F,0x80,0x1F,0x3F,0x80,0x1F,0x3F,0x80,0x1F,
0x3F,0x80,0x3F,0x3F,0x80,0x3F,0x3F,0x80,0x3F,0x3F,0x80,0x3F,0x3F,0x80,0x3F,0x7F,
0x80,0x3F,0x7E,0xC0,0x3F,0xFE,0xC0,0x3F,0xFE,0xE1,0x3F,0xFC,0xFF,0x3F,0xF8,0xFF,
0x3F,0xF8,0xFF,0x3F,0xF0,0x7F,0x3F,0xE0,0x3F,0x3F,0x80,0x0F,0x3F,0x00,0x00,0x3F,
0x00,0x80,0x1F,0x00,0x80,0x1F,0x70,0x80,0x1F,0x7E,0x80,0x1F,0xFE,0xC0,0x1F,0xFE,
0xC0,0x0F,0xFC,0xE1,0x0F,0xFC,0xFF,0x07,0xFC,0xFF,0x07,0xF8,0xFF,0x03,0xF8,0xFF,
0x01,0xF0,0xFF,0x00,0xE0,0x7F,0x00,0x80,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"9",9*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,
0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,
0x7E,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}/*":",10*/

};
unsigned char num1632[12][64]={  
{
0x00,0x00,0xC0,0x03,0xF0,0x0F,0xF8,0x1F,0xF8,0x1F,0xFC,0x3F,0x7C,0x3E,0x3C,0x3C,
0x3C,0x3C,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,
0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x3C,0x3C,
0x3C,0x3C,0x7C,0x3E,0xFC,0x3F,0xF8,0x1F,0xF8,0x1F,0xF0,0x0F,0xC0,0x03,0x00,0x00},/*"0",0*/

{0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x0F,0x00,0x0F,0x80,0x0F,0xC0,0x0F,0xE0,0x0F,
0xF0,0x0F,0xF8,0x0F,0xF8,0x0F,0x78,0x0F,0x18,0x0F,0x08,0x0F,0x00,0x0F,0x00,0x0F,
0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,
0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x0F,0x00,0x00,0x00,0x00},/*"1",1*/

{0x00,0x00,0x00,0x00,0xE0,0x07,0xF0,0x0F,0xF8,0x1F,0xFC,0x3F,0xFC,0x3F,0x3E,0x7C,
0x3E,0x78,0x1E,0x78,0x1E,0x78,0x00,0x78,0x00,0x78,0x00,0x3C,0x00,0x3C,0x00,0x3E,
0x00,0x1F,0x80,0x0F,0xC0,0x0F,0xC0,0x07,0xE0,0x03,0xF0,0x01,0xF0,0x01,0xF8,0x00,
0x7C,0x00,0xFC,0x7F,0xFC,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0x00,0x00,0x00,0x00},/*"2",2*/

{0x00,0x00,0x00,0x00,0xE0,0x03,0xF0,0x0F,0xF8,0x0F,0xFC,0x1F,0xFC,0x3F,0x3C,0x3E,
0x3E,0x3C,0x1E,0x3C,0x18,0x3C,0x00,0x3C,0x00,0x1E,0xC0,0x1F,0xC0,0x0F,0xC0,0x0F,
0xC0,0x1F,0xC0,0x3F,0x00,0x3C,0x00,0x78,0x00,0x78,0x1C,0x78,0x1E,0x78,0x3E,0x7C,
0x7C,0x7C,0xFC,0x3F,0xFC,0x3F,0xF8,0x1F,0xF0,0x0F,0xE0,0x03,0x00,0x00,0x00,0x00},/*"3",3*/

{0x00,0x00,0x00,0x00,0x00,0x1E,0x00,0x1E,0x00,0x1F,0x00,0x1F,0x80,0x1F,0x80,0x1F,
0xC0,0x1F,0xC0,0x1F,0xE0,0x1F,0xE0,0x1E,0xF0,0x1E,0x70,0x1E,0x78,0x1E,0x38,0x1E,
0x3C,0x1E,0x3C,0x1E,0x1E,0x1E,0xFE,0xFF,0xFE,0xFF,0xFE,0xFF,0xFE,0xFF,0xFE,0xFF,
0x00,0x1E,0x00,0x1E,0x00,0x1E,0x00,0x1E,0x00,0x1E,0x00,0x1E,0x00,0x00,0x00,0x00},/*"4",4*/

{0x00,0x00,0x00,0x00,0xF0,0x3F,0xF0,0x3F,0xF0,0x3F,0xF0,0x3F,0xF8,0x3F,0x78,0x00,
0x78,0x00,0x78,0x00,0x38,0x00,0xB8,0x07,0xF8,0x0F,0xFC,0x1F,0xFC,0x3F,0xFC,0x3F,
0x3C,0x7C,0x18,0x7C,0x00,0x78,0x00,0x78,0x00,0x78,0x1C,0x78,0x1E,0x78,0x3E,0x7C,
0x7C,0x3E,0xFC,0x3F,0xFC,0x1F,0xF8,0x1F,0xF0,0x0F,0xE0,0x03,0x00,0x00,0x00,0x00},/*"5",5*/

{0x00,0x00,0x00,0x00,0xC0,0x07,0xE0,0x1F,0xF0,0x1F,0xF8,0x3F,0xF8,0x3F,0x7C,0x7C,
0x3C,0x78,0x3C,0x38,0x1E,0x00,0x1E,0x00,0x9E,0x07,0xDE,0x0F,0xFE,0x1F,0xFE,0x3F,
0x7E,0x3C,0x3E,0x7C,0x3E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x3C,0x78,0x3C,0x78,
0x7C,0x7C,0xFC,0x3F,0xF8,0x3F,0xF0,0x1F,0xF0,0x0F,0xC0,0x07,0x00,0x00,0x00,0x00},/*"6",6*/

{0x00,0x00,0x00,0x00,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0xFE,0x7F,0x00,0x3C,
0x00,0x1C,0x00,0x1E,0x00,0x0E,0x00,0x0F,0x00,0x0F,0x80,0x07,0x80,0x07,0x80,0x03,
0xC0,0x03,0xC0,0x03,0xC0,0x03,0xE0,0x01,0xE0,0x01,0xE0,0x01,0xE0,0x01,0xE0,0x01,
0xF0,0x00,0xF0,0x00,0xF0,0x00,0xF0,0x00,0xF0,0x00,0xF0,0x00,0x00,0x00,0x00,0x00},/*"7",7*/

{0x00,0x00,0x00,0x00,0xC0,0x03,0xF0,0x0F,0xF8,0x1F,0xF8,0x1F,0xFC,0x3F,0x7C,0x3E,
0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x3C,0x7C,0x1E,0xF8,0x1F,0xF0,0x0F,0xF0,0x0F,
0xF8,0x1F,0xFC,0x3F,0x3C,0x3C,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x78,
0x3E,0x7C,0xFC,0x3F,0xFC,0x3F,0xF8,0x1F,0xF0,0x0F,0xE0,0x07,0x00,0x00,0x00,0x00},/*"8",8*/

{0x00,0x00,0x00,0x00,0xE0,0x03,0xF0,0x0F,0xF8,0x0F,0xFC,0x1F,0xFC,0x3F,0x3E,0x3E,
0x1E,0x3C,0x1E,0x3C,0x1E,0x78,0x1E,0x78,0x1E,0x78,0x1E,0x7C,0x3E,0x7C,0x3C,0x7E,
0xFC,0x7F,0xF8,0x7F,0xF0,0x7B,0xE0,0x79,0x00,0x78,0x00,0x78,0x1C,0x3C,0x1E,0x3C,
0x3E,0x3E,0xFC,0x1F,0xFC,0x1F,0xF8,0x0F,0xF8,0x07,0xE0,0x03,0x00,0x00,0x00,0x00},/*"9",9*/

{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0xC0,0x03,0xC0,0x03,
0xC0,0x03,0xC0,0x03,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x03,0xC0,0x03,0xC0,0x03,0xC0,0x03,
0xC0,0x03,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}/*":",10*/
};
unsigned char Year_code[] =

{
  0x4d, 0x4A, 0xB8, //2001
  0x0d, 0x4A, 0x4C, //2002
  0x0d, 0xA5, 0x41, //2003
  0x25, 0xAA, 0xB6, //2004
  0x05, 0x6A, 0x49, //2005
  0x7A, 0xAd, 0xBd, //2006
  0x02, 0x5d, 0x52, //2007
  0x09, 0x2d, 0x47, //2008
  0x5C, 0x95, 0xBA, //2009
  0x0A, 0x95, 0x4e, //2010
  0x0B, 0x4A, 0x43, //2011
  0x4B, 0x55, 0x37, //2012
  0x0A, 0xd5, 0x4A, //2013
  0x95, 0x5A, 0xBf, //2014
  0x04, 0xBA, 0x53, //2015
  0x0A, 0x5B, 0x48, //2016
  0x65, 0x2B, 0xBC, //2017
  0x05, 0x2B, 0x50, //2018
  0x0A, 0x93, 0x45, //2019
  0x47, 0x4A, 0xB9, //2020
  0x06, 0xAA, 0x4C, //2021
  0x0A, 0xd5, 0x41, //2022
  0x24, 0xdA, 0xB6, //2023
  0x04, 0xB6, 0x4A, //2024
  0x69, 0x57, 0x3d, //2025
  0x0A, 0x4e, 0x51, //2026
  0x0d, 0x26, 0x46, //2027
  0x5e, 0x93, 0x3A, //2028
  0x0d, 0x53, 0x4d, //2029
  0x05, 0xAA, 0x43, //2030
  0x36, 0xB5, 0x37, //2031
  0x09, 0x6d, 0x4B, //2032
  0xB4, 0xAe, 0xBf, //2033
  0x04, 0xAd, 0x53, //2034
  0x0A, 0x4d, 0x48, //2035
  0x6d, 0x25, 0xBC, //2036
  0x0d, 0x25, 0x4f, //2037
  0x0d, 0x52, 0x44, //2038
  0x5d, 0xAA, 0x38, //2039
  0x0B, 0x5A, 0x4C, //2040
  0x05, 0x6d, 0x41, //2041
  0x24, 0xAd, 0xB6, //2042
  0x04, 0x9B, 0x4A, //2043
  0x7A, 0x4B, 0xBe, //2044
  0x0A, 0x4B, 0x51, //2045
  0x0A, 0xA5, 0x46, //2046
  0x5B, 0x52, 0xBA, //2047
  0x06, 0xd2, 0x4e, //2048
  0x0A, 0xdA, 0x42, //2049
  0x35, 0x5B, 0x37, //2050
  0x09, 0x37, 0x4B, //2051
  0x84, 0x97, 0xC1, //2052
  0x04, 0x97, 0x53, //2053
  0x06, 0x4B, 0x48, //2054
  0x66, 0xA5, 0x3C, //2055
  0x0e, 0xA5, 0x4f, //2056
  0x06, 0xB2, 0x44, //2057
  0x4A, 0xB6, 0x38, //2058
  0x0A, 0xAe, 0x4C, //2059
  0x09, 0x2e, 0x42, //2060
  0x3C, 0x97, 0x35, //2061
  0x0C, 0x96, 0x49, //2062
  0x7d, 0x4A, 0xBd, //2063
  0x0d, 0x4A, 0x51, //2064
  0x0d, 0xA5, 0x45, //2065
  0x55, 0xAA, 0xBA, //2066
  0x05, 0x6A, 0x4e, //2067
  0x0A, 0x6d, 0x43, //2068
  0x45, 0x2e, 0xB7, //2069
  0x05, 0x2d, 0x4B, //2070
  0x8A, 0x95, 0xBf, //2071
  0x0A, 0x95, 0x53, //2072
  0x0B, 0x4A, 0x47, //2073
  0x6B, 0x55, 0x3B, //2074
  0x0A, 0xd5, 0x4f, //2075
  0x05, 0x5A, 0x45, //2076
  0x4A, 0x5d, 0x38, //2077
  0x0A, 0x5B, 0x4C, //2078
  0x05, 0x2B, 0x42, //2079
  0x3A, 0x93, 0xB6, //2080
  0x06, 0x93, 0x49, //2081
  0x77, 0x29, 0xBd, //2082
  0x06, 0xAA, 0x51, //2083
  0x0A, 0xd5, 0x46, //2084
  0x54, 0xdA, 0xBA, //2085
  0x04, 0xB6, 0x4e, //2086
  0x0A, 0x57, 0x43, //2087
  0x45, 0x27, 0x38, //2088
  0x0d, 0x26, 0x4A, //2089
  0x8e, 0x93, 0x3e, //2090
  0x0d, 0x52, 0x52, //2091
  0x0d, 0xAA, 0x47, //2092
  0x66, 0xB5, 0x3B, //2093
  0x05, 0x6d, 0x4f, //2094
  0x04, 0xAe, 0x45, //2095
  0x4A, 0x4e, 0xB9, //2096
  0x0A, 0x4d, 0x4C, //2097
  0x0d, 0x15, 0x41, //2098
  0x2d, 0x92, 0xB5, //2099
  0x0d, 0x53, 0x49, //2100
};

unsigned char days_in_a_mon[2][12] = {{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};
int lunar_calendar_mon,lunar_calendar_day;
void nongli(unsigned int year,unsigned int month,unsigned int day){

  unsigned char datenong[4];
  
  char yearstype,i,dayspring, monspring,days_nong = 0, mon_nong = 0, data11 = 0, data22 = 0, data33 = 0, data44 = 0, fm1 = 0;
  
  int days = 0, days1 = 0,flag = 0, flag1 = 0, fm = 0;
  lunar_calendar_mon = 0 ;
  lunar_calendar_day = 0 ;
  
  //year = year+2000;

      if ((!(year % 100 && year % 4) || !(year % 400)))
      {
        yearstype = 1;
      }
      else
      {
        yearstype = 0;
      }
    
      dayspring = Year_code[(100 - (2100 - year) - 1) * 3 + 2] & 0x1f; //????????????
      monspring = ((Year_code[(100 - (2100 - year) - 1) * 3 + 2] & 0x60) >> 5); //????????????
    
    flag=yearstype;
    for(i=0;i<month-1;i++)
     {
      days+=days_in_a_mon[flag][i];
     }
    days+=day;
    for(i=0;i<monspring-1;i++)
     {
      days1+=days_in_a_mon[flag][i]; 
     }
     days1+=dayspring;
    
     if(days==days1)
     {
      datenong[0]=0;
      datenong[1]=1;
      datenong[2]=0;
      datenong[3]=1;
     }//????
     else if(days>days1) //????????????
     {
      data11=Year_code[(200-(2100-year)-1)*3]&0x0f;//1-4?μ???????С(???30??С?29??)
      data22=Year_code[(200-(2100-year)-1)*3+1]; //5-12?μ???????С
      data33=(Year_code[(200-(2100-year)-1)*3+2]&0x80)>>7;//??13???μ??С(?????2???)
      data44=(Year_code[(200-(2100-year)-1)*3]&0xf0)>>4;//??????????·??0?????????
      days-=days1;
      mon_nong=1;
      fm=0;
      flag1=0;
      days_nong=30*(data11>>3)+29*(!(data11>>3));
      while(days>=days_nong)
      {
       flag1=1;
       days-=days_nong;
       if(data44==mon_nong) //?????????
       {
        fm=1; //???
       }
       mon_nong++;
       if(mon_nong<5) //1-4??
       {
        days_nong=30*((data11>>(4-mon_nong))&0x01)+29*(!(((data11>>(4-mon_nong))&0x01)));
       }
       else if((mon_nong==13)&&(fm==1)) //?????μ?????????????
       {
        days_nong=30*data33+29*(!data33);
       }
       else if(mon_nong>=5 && mon_nong<13)  //5-12??
       {
        days_nong=30*((data22>>(12-mon_nong))&0x01)+29*(!((data22>>(12-mon_nong))&0x01));
       }
      }
      if(fm==1) //?????????￡??????????
      {
       fm=0;
       mon_nong--;
      }
      datenong[0]=mon_nong/10;
      datenong[1]=mon_nong%10;
      datenong[2]=(days+1)/10;
      datenong[3]=(days+1)%10;
     }
     else if(days<days1) //???????????
     {
      data11=Year_code[(200-(2100-year)-1)*3-3]&0x0f;//?????1-4?μ???????С(???30??С?29??)
      data22=Year_code[(200-(2100-year)-1)*3+1-3]; //?????5-12?μ???????С
      data33=(Year_code[(200-(2100-year)-1)*3+2-3]>>7);//??????13???μ??С(?????2???)
      data44=((Year_code[(200-(2100-year)-1)*3-3]&0xf0)>>4);//???????????????·??0?????????
      
      days=days1-days; //?????????????
      mon_nong=12;
      fm=0;
     // flag1=0;
      if(data44==0)
      {
       days_nong=30*(data22&0x01)+29*(!(data22&0x01));
       fm1=0;
      }
      else
      {
       days_nong=30*data33+29*(!data33);
       fm1=1;
        }
      while(days>days_nong)
      {
       //flag1=1;
       days-=days_nong;
       if(data44==mon_nong) //?????????
       {
        fm=1; //???
       }
       mon_nong--;
       if(mon_nong<(5-fm1)) //1-4??
       {
        days_nong=30*((data11>>(4-mon_nong-fm1))&0x01)+29*(!(((data11>>(4-mon_nong-fm1))&0x01)));
       }
       else  //5-12??
       {
        days_nong=30*((data22>>(12-mon_nong-fm1))&0x01)+29*(!((data22>>(12-mon_nong-fm1))&0x01));
       }
      }
      //if(flag1==1) {mon_nong--;flag1=0;} //
      if(fm==1) //?????????￡???????????
      {
       fm=0;
       mon_nong++;
      }
      datenong[0]=mon_nong/10;
      datenong[1]=mon_nong%10;
      datenong[2]=(days_nong-days+1)/10;
      datenong[3]=(days_nong-days+1)%10;
     }
    if (datenong[0] > 0)
    {
     lunar_calendar_mon=(int) datenong[0]*10+datenong[1];
    }
    else
    {
      lunar_calendar_mon=(int) datenong[1];
    }
    if (datenong[2] > 0)
    {
     lunar_calendar_day=(int) datenong[2]*10+datenong[3];
    }
    else
    {
      lunar_calendar_day=(int) datenong[3];
    }
    //year = year-2000;
}
void setup() {
  pinMode(LCD_BK, OUTPUT);
  WiFi.begin(ssid, password);

  while ( WiFi.status() != WL_CONNECTED ) {
    delay ( 500 );
    Serial.print ( "." );
  }
  timeClient.begin();
  if (!client1.connect("api.thinkpage.cn", 80)) {
    //Serial.println("connection failed");
    return;
  }
  u8g2.begin();  
  digitalWrite(LCD_BK,HIGH);
}
void readReponseContent(char* content, size_t maxSize) {
  lcd_disp_table[2][0]='B';
  size_t length = client1.peekBytes(content, maxSize);
  delay(100);
  //for(int i=0;i<length-4;i++)content[i]=content[i+4];
  content[length] ='\0';//content[1] =' ';content[2] =' ';
  //content[length] = 0;
  //lcd_disp_table[2][0]='C';
  //Serial.println(content);
  //Serial.println("Read Over!");
}
const unsigned long HTTP_TIMEOUT = 2100;               // max respone time from server
const size_t MAX_CONTENT_SIZE = 2048;
bool skipResponseHeaders1() {
  // HTTP headers end with an empty line
  char endOfHeaders[] = "\r\n\r\n";
 
  client1.setTimeout(HTTP_TIMEOUT);
  bool ok = client1.find(endOfHeaders);
 
  if (!ok) {
    //Serial.println("No response or invalid response!");
  }
 
  return ok;
}
bool sendRequest() {
  client1.print(String("GET ") +"/v3/weather/daily.json?key=dfj9gtwabtz3eya1&location=qitaihe&language=zh-Hans&unit=c&start=-1&days=5" + " HTTP/1.1\r\n" +
               "Host: api.thinkpage.cn\r\n" +
               "Connection: close\r\n\r\n");
  return true;
}
//char weather[16];
unsigned char wind_scale=0;
char day_weather=0;
char night_weather=0;
char temp1[4];
char temp2[4];
String t1="",t2="";
unsigned char t1len=0,t2len=0;
bool parseUserData(char* content) {
  DynamicJsonBuffer jsonBuffer;
 JsonObject& root = jsonBuffer.parseObject(content);
  if (!root.success()) {
 //   Serial.println("JSON parsing failed!");
    return false;
  }
  char dayw[4];
  char nightw[4];
  char winds[4];
  char temp11[4];
  char temp22[4];
  strcpy(dayw, root["results"][0]["daily"][0]["code_day"]);
  strcpy(nightw, root["results"][0]["daily"][0]["code_night"]);
  strcpy(winds, root["results"][0]["daily"][0]["wind_scale"]);
  strcpy(temp1, root["results"][0]["daily"][0]["low"]);
  strcpy(temp2, root["results"][0]["daily"][0]["high"]);
  String w="";
  int i;
  for(i=0;i<4;i++)w += dayw[i];
  day_weather=w.toInt();
  w="";
  for(i=0;i<4;i++)w += nightw[i];
  night_weather=w.toInt();
  w="";
  for(i=0;i<4;i++)w += winds[i];
  wind_scale=w.toInt();
//  w="";
  for(i=0;i<4;i++){if(temp1[i]<'0' || temp1[i]>'9') if(temp1[i]!='-'){t1len=i;break;}}//t1 += temp1[i];
  for(i=0;i<4;i++){if(temp2[i]<'0' || temp2[i]>'9') if(temp2[i]!='-'){t2len=i;break;}}//t1 += temp1[i];
//  temp1=w.toInt();
//  w="";
  for(i=0;i<4;i++)t2 += temp2[i];
//  temp2=w.toInt();
  //temp1=t1.toInt();
  //temp2=t2.toInt();
  return true;
}
void u8g2_prepare(void) {
  u8g2.setFont(u8g_font_7x14B);
  u8g2.setFontRefHeightExtendedText();
  u8g2.setDrawColor(1);
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
}

unsigned int year,hourold=0;

unsigned char week_data[8][32]={{
      0x00,0x10,0xFC,0x3F,0x84,0x10,0x84,0x12,
      0xF4,0x17,0x84,0x10,0x84,0x14,0xFC,0x1F,
      0x04,0x12,0xE4,0x17,0x24,0x12,0x24,0x12,
      0x24,0x12,0xE2,0x13,0x21,0x14,0x00,0x08},
      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x20,0xFF,0x7F,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x08,0xFC,0x1F,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,
      0xFF,0x7F,0x00,0x00,0x00,0x00,0x00,0x00},
      {0x00,0x00,0x00,0x10,0xFE,0x3F,0x00,0x00,
      0x00,0x00,0x00,0x00,0x00,0x08,0xFC,0x1F,
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      0x00,0x20,0xFF,0x7F,0x00,0x00,0x00,0x00},
      {0x00,0x00,0x00,0x20,0xFE,0x7F,0x22,0x22,
      0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x22,
      0x22,0x22,0x22,0x3C,0x12,0x20,0x0A,0x20,
      0x02,0x20,0xFE,0x3F,0x02,0x20,0x00,0x00},
      {0x00,0x00,0x00,0x10,0xFE,0x3F,0x40,0x00,
      0x40,0x00,0x40,0x00,0x40,0x08,0xFC,0x3F,
      0x20,0x08,0x20,0x08,0x20,0x08,0x10,0x08,
      0x10,0x08,0x10,0x28,0xFF,0x7F,0x00,0x00},
      {0x00,0x00,0x20,0x00,0x40,0x00,0xC0,0x00,
      0x80,0x20,0xFF,0x7F,0x00,0x00,0x00,0x00,
      0x20,0x02,0x30,0x04,0x10,0x08,0x08,0x18,
      0x08,0x30,0x04,0x30,0x02,0x20,0x00,0x00},
      {0x00,0x08,0xF8,0x1F,0x08,0x08,0x08,0x08,
      0x08,0x08,0x08,0x08,0x08,0x08,0xF8,0x0F,
      0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,
      0x08,0x08,0xF8,0x0F,0x08,0x08,0x00,0x00
      }
};
unsigned char weather_hz[36][32]={
      {0x00,0x02,0x10,0x12,0xFE,0x3F,0x12,0x02,
      0xD2,0x1F,0x12,0x02,0xF2,0x7F,0x1E,0x10,
      0xD2,0x3F,0x52,0x10,0xD2,0x1F,0x52,0x10,
      0xDE,0x1F,0x52,0x10,0x40,0x14,0x40,0x08},
      
//"云", 
      {0x00,0x00,0x00,0x04,0xF8,0x0F,0x00,0x00,
      0x00,0x00,0x00,0x20,0xFF,0x7F,0x40,0x00,
      0x40,0x00,0x20,0x00,0x20,0x00,0x10,0x00,
      0x10,0x04,0x08,0x08,0xFC,0x1F,0x00,0x10},

//"阴", 
{0x00,0x20,0x3E,0x7F,0x22,0x21,0x12,0x21,
      0x12,0x21,0x0A,0x3F,0x12,0x21,0x12,0x21,
      0x22,0x21,0x22,0x3F,0x22,0x21,0x16,0x21,
      0x8A,0x20,0x82,0x20,0x42,0x28,0x22,0x10},

//"雨", 
{0x00,0x20,0xFF,0x7F,0x80,0x00,0x80,0x10,
      0xFC,0x3F,0x84,0x10,0x84,0x10,0x94,0x12,
      0xA4,0x14,0x84,0x10,0x84,0x10,0x94,0x12,
      0xA4,0x14,0x84,0x10,0x84,0x14,0x04,0x08},

//"雪", 
{0xF8,0x0F,0x80,0x00,0xFE,0x7F,0x82,0x40,
      0xB9,0x2E,0x80,0x00,0xB8,0x0E,0x80,0x10,
      0xFC,0x3F,0x00,0x10,0x00,0x10,0xF8,0x1F,
      0x00,0x10,0x00,0x10,0xFC,0x1F,0x00,0x10},

//"风", 
{0x00,0x08,0xFC,0x1F,0x04,0x08,0x14,0x0A,
      0x24,0x0A,0x44,0x09,0x44,0x09,0x84,0x08,
      0x84,0x08,0x44,0x09,0x44,0x09,0x24,0x0A,
      0x14,0x0A,0x0C,0x48,0x02,0x50,0x01,0x60},

//"雾", 
{0xFC,0x1F,0x80,0x00,0xFE,0x7F,0x8A,0x48,
      0x91,0x24,0x28,0x08,0xE0,0x07,0x30,0x02,
      0xC8,0x01,0x30,0x06,0x4F,0x78,0xF0,0x27,
      0x40,0x04,0x20,0x04,0x10,0x05,0x0C,0x02},

//"霾", 
{0xF8,0x0F,0x80,0x00,0xFE,0x7F,0x8A,0x48,
      0xB1,0x26,0x08,0x08,0xD4,0x3F,0xA7,0x24,
      0x98,0x3F,0x96,0x24,0xA9,0x3F,0x26,0x04,
      0xA0,0x3F,0x26,0x04,0xE8,0x7F,0x10,0x00},

//"冷", 
{0x00,0x01,0x02,0x01,0x8C,0x02,0x48,0x04,
      0x20,0x08,0x90,0x10,0x08,0x71,0x08,0x21,
      0xE4,0x0F,0x07,0x08,0x04,0x04,0x04,0x02,
      0x44,0x01,0x84,0x00,0x04,0x03,0x00,0x02},

//"热", 
{0x10,0x02,0x10,0x02,0x10,0x12,0xFE,0x3F,
      0x10,0x12,0x50,0x12,0x38,0x13,0x16,0x12,
      0x10,0x15,0x10,0x51,0x94,0x50,0x48,0x20,
      0x00,0x00,0x12,0x11,0x22,0x62,0x21,0x42},

//"雷", 
{0x00,0x08,0xFC,0x1F,0x80,0x00,0xFE,0x7F,
      0x82,0x40,0xB9,0x2E,0x80,0x00,0xB8,0x0E,
      0x80,0x00,0xFC,0x1F,0x84,0x10,0x84,0x10,
      0xFC,0x1F,0x84,0x10,0x84,0x10,0xFC,0x1F
},
//"多", 
{0x40,0x00,0x40,0x00,0xE0,0x0F,0x10,0x04,
      0x18,0x02,0xA4,0x01,0x40,0x01,0x30,0x01,
      0x8E,0x3F,0x40,0x10,0x30,0x08,0x48,0x04,
      0x84,0x03,0x80,0x00,0x70,0x00,0x0E,0x00},

//"间", 
{0x04,0x20,0xD8,0x7F,0x10,0x20,0x02,0x24,
      0xF2,0x2F,0x12,0x24,0x12,0x24,0x12,0x24,
      0xF2,0x27,0x12,0x24,0x12,0x24,0x12,0x24,
      0xF2,0x27,0x12,0x24,0x02,0x28,0x02,0x10},

//"部", 
{0x08,0x00,0x10,0x3E,0x40,0x22,0xFE,0x22,
      0x00,0x12,0x44,0x12,0x28,0x0A,0xFF,0x13,
      0x40,0x22,0xFC,0x42,0x44,0x42,0x44,0x46,
      0x44,0x2A,0x7C,0x12,0x44,0x02,0x00,0x02},

//"阵", 
{0x00,0x01,0x1E,0x21,0xF2,0x7F,0x0A,0x01,
      0x0A,0x05,0x86,0x04,0x8A,0x14,0xD2,0x3F,
      0x12,0x04,0x12,0x04,0x16,0x24,0xEA,0x7F,
      0x02,0x04,0x02,0x04,0x02,0x04,0x02,0x04},

//"伴", 
{0x10,0x02,0x10,0x02,0x50,0x12,0x88,0x0A,
      0x08,0x02,0xEC,0x3F,0x0C,0x02,0x0A,0x02,
      0x09,0x22,0xF8,0x7F,0x08,0x02,0x08,0x02,
      0x08,0x02,0x08,0x02,0x08,0x02,0x08,0x02},

//"有", 
{0x40,0x00,0x40,0x20,0xFF,0x7F,0x20,0x00,
      0x20,0x08,0xF0,0x1F,0x10,0x08,0x18,0x08,
      0xF4,0x0F,0x12,0x08,0x11,0x08,0xF0,0x0F,
      0x10,0x08,0x10,0x08,0x10,0x0A,0x10,0x04},

//"冰", 
{0x00,0x01,0x02,0x01,0x0C,0x21,0x08,0x31,
      0x00,0x09,0xF0,0x05,0x88,0x03,0x48,0x03,
      0x44,0x05,0x27,0x09,0x24,0x11,0x14,0x71,
      0x0C,0x21,0x04,0x01,0x44,0x01,0x84,0x00},

//"雹", 
{0xF8,0x0F,0x80,0x00,0xFE,0x7F,0x82,0x40,
      0xB9,0x2E,0x80,0x00,0xB8,0x0E,0x10,0x00,
      0xF0,0x0F,0x08,0x09,0xF4,0x0B,0x12,0x09,
      0xF0,0x09,0x10,0x2D,0x10,0x20,0xE0,0x3F},

//"小", 
{0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,
      0x80,0x00,0xA0,0x02,0xA0,0x04,0x90,0x08,
      0x90,0x10,0x88,0x20,0x84,0x20,0x82,0x00,
      0x80,0x00,0x80,0x00,0xA0,0x00,0x40,0x00},

//"中", 
{0x80,0x00,0x80,0x00,0x80,0x20,0xFE,0x7F,
      0x82,0x20,0x82,0x20,0x82,0x20,0x82,0x20,
      0xFE,0x3F,0x82,0x20,0x80,0x00,0x80,0x00,
      0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00},

//"大", 
{0x80,0x00,0x80,0x00,0x80,0x00,0x80,0x00,
      0x80,0x20,0xFF,0x7F,0x80,0x00,0x40,0x01,
      0x40,0x01,0x40,0x02,0x20,0x02,0x20,0x04,
      0x10,0x08,0x08,0x70,0x06,0x20,0x00,0x00},

//"暴", 
{0xF8,0x0F,0x08,0x08,0xF8,0x0F,0x08,0x08,
      0xF8,0x0F,0x20,0x02,0xFE,0x3F,0x20,0x02,
      0xFF,0x7F,0x20,0x02,0x90,0x04,0xAC,0x7A,
      0xC3,0x21,0x90,0x04,0x88,0x08,0xC0,0x00},

//"特", 
{0x08,0x02,0x08,0x02,0x0A,0x12,0xCA,0x3F,
      0x3E,0x02,0x09,0x22,0xE8,0x7F,0x18,0x08,
      0x0C,0x28,0xEB,0x7F,0x88,0x08,0x08,0x09,
      0x08,0x09,0x08,0x08,0x08,0x0A,0x08,0x04},

//"冻", 
{0x00,0x02,0x02,0x12,0xC4,0x3F,0x08,0x01,
      0x08,0x01,0x80,0x04,0x80,0x24,0xD0,0x7F,
      0x08,0x04,0x06,0x05,0x04,0x15,0x84,0x24,
      0x44,0x44,0x24,0x44,0x04,0x05,0x00,0x02},

//"浮", 
{0x02,0x10,0x0C,0x3C,0xE8,0x03,0x00,0x10,
      0x41,0x12,0x46,0x0A,0x04,0x00,0xD0,0x1F,
      0x08,0x04,0x04,0x22,0xF7,0x7F,0x04,0x02,
      0x04,0x02,0x04,0x02,0x84,0x02,0x04,0x01},

//"尘", 
{0x80,0x00,0x80,0x00,0xA0,0x02,0xB0,0x04,
      0x88,0x18,0x84,0x30,0x82,0x20,0x00,0x00,
      0x80,0x00,0x80,0x10,0xFE,0x3F,0x80,0x00,
      0x80,0x00,0x80,0x20,0xFF,0x7F,0x00,0x00},

//"扬", 
{0x08,0x00,0xC8,0x1F,0x08,0x08,0x08,0x04,
      0x3F,0x02,0x08,0x21,0xE8,0x7F,0x18,0x25,
      0x0C,0x25,0x0B,0x25,0x88,0x24,0x88,0x22,
      0x48,0x22,0x28,0x21,0x8A,0x14,0x04,0x08},

//"沙", 
{0x00,0x02,0x04,0x02,0x18,0x02,0x10,0x02,
      0x81,0x0A,0x86,0x12,0x44,0x62,0x50,0x42,
      0x28,0x12,0x04,0x12,0x07,0x0A,0x04,0x04,
      0x04,0x02,0x04,0x01,0xC4,0x00,0x34,0x00},

//"强", 
{0x10,0x20,0xBF,0x7F,0x90,0x20,0x90,0x20,
      0x90,0x3F,0x9E,0x24,0x12,0x04,0xC2,0x7F,
      0x42,0x44,0x5E,0x44,0xD0,0x7F,0x50,0x44,
      0x10,0x04,0x11,0x24,0xCA,0x7F,0x04,0x40},

//"飓", 
{0x20,0x10,0x7E,0x3F,0x22,0x11,0x22,0x1F,
      0x22,0x11,0x36,0x1F,0x36,0x11,0x2A,0x1F,
      0x2A,0x11,0x2A,0x11,0xF6,0x7F,0x36,0x0A,
      0x22,0x51,0x22,0x40,0xC2,0x7F,0x01,0x00},

//"带", 
{0x90,0x04,0x90,0x14,0xFE,0x3F,0x90,0x04,
      0x90,0x04,0xFE,0x7F,0x82,0x40,0x81,0x20,
      0xF8,0x0F,0x88,0x08,0x88,0x08,0x88,0x08,
      0x88,0x08,0x88,0x0A,0x88,0x04,0x80,0x00},

//"龙", {
{0x40,0x00,0x40,0x02,0x40,0x04,0x40,0x20,
      0xFF,0x7F,0x40,0x01,0x40,0x11,0x20,0x11,
      0x20,0x09,0x20,0x05,0x10,0x03,0x10,0x41,
      0x88,0x41,0x68,0x41,0x04,0x7E,0x02,0x00},

//"卷", 
{0x80,0x00,0x88,0x08,0x90,0x04,0x80,0x10,
      0xFE,0x3F,0x40,0x01,0xFF,0x7F,0x20,0x02,
      0x10,0x04,0xF8,0x0F,0x14,0x74,0x13,0x24,
      0x90,0x04,0x10,0x13,0x10,0x10,0xE0,0x1F
      },
      //"夹", 
      {0x80,0x00,0x80,0x00,0x80,0x10,0xFE,0x3F,
      0x80,0x00,0x88,0x08,0x90,0x04,0x80,0x20,
      0xFF,0x7F,0x80,0x00,0x40,0x01,0x40,0x01,
      0x20,0x02,0x10,0x0C,0x0C,0x70,0x03,0x20},
      {0x40,0x00,0x40,0x00,0x40,0x00,0x40,0x10,
      0xFE,0x3F,0x40,0x10,0x40,0x10,0x40,0x10,
      0x40,0x10,0x40,0x10,0x40,0x10,0x20,0x10,
      0x20,0x10,0x10,0x11,0x10,0x0A,0x0E,0x04}};
unsigned char wendu[]={0x00,0x06,0x06,0x78,0xCC,0x86,0x06,0x06,  // -C-
 0x06,0x06,0x86,0xCC,0x78,0x00,0x00,0x00};      
unsigned char w_len[39]={1,1,1,1,2,4,4,4,4,1,2,3,7,2,2,2,2,3,4,2,3,2,2,2,2,2,2,2,3,4,1,1,1,2,2,4,3,1,1};
unsigned char w_str[39][7]={{0},{0},{0},{0},{11,1},{0,12,11,1},{0,12,11,1},{21,13,11,1},{21,13,11,1},
{2},{14,3},{10,14,3},{10,14,3,15,16,17,18},{19,3},{20,3},{21,3},{22,3},{21,22,3},{23,21,22,3},{25,3},
{3,34,4},{14,4},{19,4},{20,4},{21,4},{22,4},{25,26},{27,28},{28,26,22},{29,28,26,22},{6},{7},{5},{21,5},{30,5},{9,31,5,22},{32,33,5},{8},{9}};
void loop() {
  u8g2.clearBuffer();
  u8g2_prepare(); 
  year = 1970;
  unsigned char y;
  timeClient.update();
  second=timeClient.getEpochTime()+7*3600;
  while(1) {
    uint32_t seconds;
    if(isLeapYear(year)) seconds = 86400 * 366;
    else seconds = 86400 * 365;
    if(second >= seconds) {
      second -= seconds;
      year++;
    } else break;
  }
  unsigned int month = 0;
  while(1) {    
    uint32_t seconds = 86400 * days_in_month[month];
    if(isLeapYear(year) && month == 1) seconds = 86400 * 29;
    if(second >= seconds) {
      second -= seconds;
      month++;
    } else break;
  }  
  month++;
  unsigned int day = 1;
  while(1) {
    if(second >= 86400) {
      second -= 86400;
      day++;
    } else break;
  }

  unsigned int hour = second / 3600;
  unsigned int minute = (second - (uint32_t)hour * 3600) / 60;
  int iweek = (day+2*month+3*(month+1)/5+year+year/4-year/100+year/400)%7;  
  if(hour<=7 || hour >20){
    unsigned char dw1[16]={0};
    dw1[0]=year/1000+48;
    dw1[1]=(year%1000)/100+48;
    dw1[2]=((year%1000)%100)/10+48;
    dw1[3]=((year%1000)%100)%10+48;
    dw1[4]='-';
    dw1[5]=(month/10)+48;
    dw1[6]=(month%10)+48;
    dw1[7]='-';
    dw1[8]=(day/10)+48;
    dw1[9]=(day%10)+48;
    u8g2.drawStr(0, 0, (const char *)dw1);
    u8g2.drawXBMP(96,0,16,16, week_data[0]);
    u8g2.drawXBMP(112,0,16,16, week_data[iweek+1]);
    u8g2.drawXBMP(4,16,24,48, num2448[hour/10]);
    u8g2.drawXBMP(28,16,24,48, num2448[hour%10]);
    u8g2.drawXBMP(52,16,24,48, num2448[10]);
    u8g2.drawXBMP(76,16,24,48, num2448[minute/10]);
    u8g2.drawXBMP(100,16,24,48, num2448[minute%10]);
  }else{
  //unsigned int sec = (second - (uint32_t)hour * 3600) - minute * 60;
if(lunar_calendar_mon >month)year=year-1;
 nongli(year,month,day);      
  
  if(hourold!=hour){
    hourold=hour;
    if (client1.connect("api.thinkpage.cn", 80)) {
      if (sendRequest() && skipResponseHeaders1()) {
        char response[MAX_CONTENT_SIZE];
        readReponseContent(response, sizeof(response));
        if (parseUserData(response)) {
          u8g2.drawStr(8, 32, (const char *)temp1);
          u8g2.drawStr(8+(t1len)*8, 32, "/");
          u8g2.drawStr(16+(t1len)*8, 32, (const char *)temp2);
          u8g2.drawXBMP(16+(t1len)*8+(t2len)*8,32,8,16, wendu);
          for( int t=0;t<w_len[day_weather];t++){
            u8g2.drawXBMP(t*16,48,16,16, weather_hz[w_str[day_weather][t]]);
          }
        }
      }
      client1.stop();
    }
    
  }
 
  unsigned char dw[10]={0};
  dw[0]=(month/10)+48;
  dw[1]=(month%10)+48;
  dw[2]='/';
  dw[3]=(day/10)+48;
  dw[4]=(day%10)+48;
  u8g2.drawStr(88, 0, (const char *)dw);
  dw[0]=(lunar_calendar_mon/10)+48;
  dw[1]=(lunar_calendar_mon%10)+48;
  dw[2]='/';
  dw[3]=(lunar_calendar_day/10)+48;
  dw[4]=(lunar_calendar_day%10)+48;
  u8g2.drawStr(88, 32, (const char *)dw);
            u8g2.drawStr(8, 32, (const char *)temp1);
          u8g2.drawStr(8+(t1len)*8, 32, "/");
          u8g2.drawStr(16+(t1len)*8, 32, (const char *)temp2);
          u8g2.drawXBMP(16+(t1len)*8+(t2len)*8,32,8,16, wendu);
          for( int t=0;t<w_len[day_weather];t++){
            if(hour>=7 and hour<=18)u8g2.drawXBMP(t*16,48,16,16, weather_hz[w_str[day_weather][t]]);
            else u8g2.drawXBMP(t*16,48,16,16, weather_hz[w_str[night_weather][t]]);
            
          }
          u8g2.drawXBMP(80,48,16,16, weather_hz[5]);
          u8g2.drawXBMP(96,48,16,16, weather_hz[35]);
          u8g2.drawStr(112, 48, (const char *)":");
          char ooo[10];
          itoa(wind_scale,ooo,10);
          u8g2.drawStr(120, 48, (const char *)ooo);
  u8g2.drawXBMP(0,0,16,32, num1632[hour/10]);
  u8g2.drawXBMP(16,0,16,32, num1632[hour%10]);
  u8g2.drawXBMP(32,0,16,32, num1632[10]);
  u8g2.drawXBMP(48,0,16,32, num1632[minute/10]);
  u8g2.drawXBMP(64,0,16,32, num1632[minute%10]);
  u8g2.drawXBMP(90,16,16,16, week_data[0]);
  u8g2.drawXBMP(106,16,16,16, week_data[iweek+1]);
   
  }
  u8g2.sendBuffer();
  delay(60000);
}

